generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  role         String
  createdAt    DateTime  @default(now())
  name         String?
  parkingDate  DateTime  @default(now())
  parkingSlot  String?
  phone        String?
  plateNumber  String?
  status       String    @default("pending")
  otp          String?
  otpExpiresAt DateTime?
  bookings     Booking[] // One-to-many relationship with Booking
}

model Booking {
  id          Int       @id @default(autoincrement())
  fullName    String
  email       String
  phone       String
  plateNumber String
  entryTime   DateTime
  exitTime    DateTime?
  createdAt   DateTime  @default(now())
  status      String    @default("pending")

  userId    Int
  parkingId Int?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parking Parking? @relation("ParkingToBooking", fields: [parkingId], references: [id])
  payment Payment? @relation("BookingPayment")
}

model Payment {
  id        Int     @id @default(autoincrement())
  bookingId Int     @unique
  amount    Int
  booking   Booking @relation("BookingPayment", fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Parking {
  id             Int      @id @default(autoincrement())
  parkingCode    String   @unique
  parkingName    String
  availableSlots Int
  location       String
  feePerHour     Int
  createdAt      DateTime @default(now())

  bookings Booking[] @relation("ParkingToBooking") // Match the relation name in Booking
}
